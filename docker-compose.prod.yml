services:
  frontend:
    build: 
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    env_file:
      - .env
    depends_on:
      - backend
    restart: unless-stopped
    networks:
      - hypertube-network

  backend:
    build: 
      context: ./backend
      dockerfile: Dockerfile
    container_name: backend
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./uploads:/usr/src/app/uploads
    env_file:
      - .env
    command: npm run start:prod
    restart: unless-stopped
    networks:
      - hypertube-network

  db:
    image: mongo:4.4
    container_name: db
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongo", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - hypertube-network

  nginx:
    image: nginx:alpine
    container_name: nginx
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx-http-only.conf:/etc/nginx/nginx.conf:ro
      - ./certbot/conf:/etc/letsencrypt:ro
      - ./certbot/www:/var/www/certbot:ro
    depends_on:
      - frontend
      - backend
    restart: unless-stopped
    networks:
      - hypertube-network

  # Simple certbot for SSL
  certbot:
    image: certbot/certbot
    container_name: certbot
    restart: "no"
    profiles: ["ssl"]
    volumes:
      - ./certbot/conf:/etc/letsencrypt
      - ./certbot/www:/var/www/certbot
    command: certonly --webroot --webroot-path=/var/www/certbot --email admin@flixora.uk --agree-tos --no-eff-email -d flixora.uk

networks:
  hypertube-network:
    driver: bridge

volumes:
  mongo-data:
