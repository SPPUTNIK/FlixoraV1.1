services:
  frontend:
    build: ./frontend
    container_name: frontend
    ports:
      - '3000:3000'
    volumes:
      - ./frontend:/usr/src/app
      - frontend_node_modules:/usr/src/app/node_modules
    env_file:
      - .env
    depends_on:
      - backend
    command: npm run dev
    restart: unless-stopped
    networks:
      - hypertube-network

  backend:
    build: ./backend
    container_name: backend
    ports:
      - '3001:3001'
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules
      - ./uploads:/usr/src/app/uploads
    env_file:
      - .env
    command: npm run start:dev
    restart: unless-stopped
    networks:
      - hypertube-network

  db:
    image: mongo:6
    container_name: db
    ports:
      - '27017:27017'
    volumes:
      - mongo-data:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
      MONGO_INITDB_DATABASE: ${MONGO_INITDB_DATABASE}
      # Application user credentials
      MONGO_APP_USER: ${MONGO_APP_USER}
      MONGO_APP_PASSWORD: ${MONGO_APP_PASSWORD}
      MONGO_APP_DATABASE: ${MONGO_APP_DATABASE}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    networks:
      - hypertube-network

networks:
  hypertube-network:
    driver: bridge

volumes:
  mongo-data:
  frontend_node_modules:
